Attribute VB_Name = "—»Ѕ“≈’√ј«"
Rem ***************************************************************************
Rem ***************************************************************************
Rem **                                                                       **
Rem ** THIS SOFTWARE PROVIDES NO WARRANITY AND DISTRIBUTED UNDER             **
Rem **                                              GNU GPL LICENCE          **
Rem ***************************************************************************
Rem ***************************************************************************

Option Explicit

Rem »спользуемые падежи
Public Enum Casus
    »мѕад
    –одѕад
    ƒатѕад
    ¬инѕад
    [_TotalCasi]
End Enum

Rem —писок всех пор€дков чисел
Private Enum Expo
    unitExp
    thouExp
    millExp
    billExp
    trilExp
    [_TotalExpo]
End Enum

Rem используетс€ дл€ определени€, корректировать цену с Ќƒ— или без Ќƒ—
Public Enum ExistVAT
    Ѕ≈«Ќƒ—
    —Ќƒ—
End Enum

Private Enum Sex
    MaleSex
    FemaleSex
    [_TotalSexes]
End Enum

Private Type WORD
    Casi(2 * [_TotalCasi]) As String
    sx As Sex
End Type

Rem ***************************************************************************
Rem ***************************************************************************
Rem **                                                                       **
Rem **         *   * ***** *   *  **** *****  *   *   * ***** *   *          **
Rem **         *  *  *   * *   * *       *   * *  *   *   *   *   *          **
Rem **         ***   *   * ***** *       *  *   * *****   *   **  *          **
Rem **         *  *  *   * *   * *       *  ***** *   *   *   * * *          **
Rem **         *   * ***** *   *  ****   *  *   * *   *   *   **  *          **
Rem **                                                                       **
Rem ***************************************************************************
Rem ***************************************************************************

Rem ¬еро€тные ошибки
Private Enum errors
    WSexErr = vbError + 513 ' Wrong Sex Error
    WCasErr '                 Wrong Casus Error
    WNumErr '                 Wrong Number Error
    VnFErr '                  Value not Found Error
    [_TotalErrors]
End Enum

Rem —ледующие функции возвращают константные значени€

Rem ‘ункци€, возвращающа€ константу из копеек
Private Function Cents() As WORD
    With Cents
        .Casi(»мѕад) = "копейка":  .Casi(GetPlural(»мѕад)) = "копейки"
        .Casi(–одѕад) = "копейки": .Casi(GetPlural(–одѕад)) = "копеек"
        .Casi(ƒатѕад) = "копейке": .Casi(GetPlural(ƒатѕад)) = "копейкам"
        .Casi(¬инѕад) = "копейку": .Casi(GetPlural(¬инѕад)) = "копейки"
        .sx = FemaleSex
    End With
End Function

Rem ‘ункци€, возвращающа€ константу из рублей
Private Function Rubles() As WORD
    With Rubles
        .Casi(»мѕад) = "рубль":  .Casi(GetPlural(»мѕад)) = "рубли"
        .Casi(–одѕад) = "рубл€": .Casi(GetPlural(–одѕад)) = "рублей"
        .Casi(ƒатѕад) = "рублю": .Casi(GetPlural(ƒатѕад)) = "рубл€м"
        .Casi(¬инѕад) = "рубль": .Casi(GetPlural(¬инѕад)) = "рубли"
        .sx = MaleSex
    End With
End Function

Rem ‘ункци€, возвращающа€ константу из тыс€ч
Private Function Thousands() As WORD
    With Thousands
        .Casi(»мѕад) = "тыс€ча":  .Casi(GetPlural(»мѕад)) = "тыс€чи"
        .Casi(–одѕад) = "тыс€чи": .Casi(GetPlural(–одѕад)) = "тыс€ч"
        .Casi(ƒатѕад) = "тыс€че": .Casi(GetPlural(ƒатѕад)) = "тыс€чам"
        .Casi(¬инѕад) = "тыс€чу": .Casi(GetPlural(¬инѕад)) = "тыс€чи"
        .sx = FemaleSex
    End With
End Function

Rem ‘ункци€, возвращающа€ константу из миллионов
Private Function Millions() As WORD
    With Millions
        .Casi(»мѕад) = "миллион":   .Casi(GetPlural(»мѕад)) = "миллионы"
        .Casi(–одѕад) = "миллиона": .Casi(GetPlural(–одѕад)) = "миллионов"
        .Casi(ƒатѕад) = "миллиону": .Casi(GetPlural(ƒатѕад)) = "миллионам"
        .Casi(¬инѕад) = "миллион":  .Casi(GetPlural(¬инѕад)) = "миллионы"
        .sx = MaleSex
    End With
End Function

Rem ‘ункци€, возвращающа€ константу из миллиардов
Private Function Billions() As WORD
    With Billions
        .Casi(»мѕад) = "миллиард":   .Casi(GetPlural(»мѕад)) = "миллиарды"
        .Casi(–одѕад) = "миллиарда": .Casi(GetPlural(–одѕад)) = "миллиардов"
        .Casi(ƒатѕад) = "миллиарду": .Casi(GetPlural(ƒатѕад)) = "миллиардам"
        .Casi(¬инѕад) = "миллиард":  .Casi(GetPlural(¬инѕад)) = "миллиарды"
        .sx = MaleSex
    End With
End Function

Rem ‘ункци€, возвращающа€ константу из триллионов
Private Function Trillions() As WORD
    With Trillions
        .Casi(»мѕад) = "триллион":   .Casi(GetPlural(»мѕад)) = "триллионы"
        .Casi(–одѕад) = "триллиона": .Casi(GetPlural(–одѕад)) = "триллионов"
        .Casi(ƒатѕад) = "триллиону": .Casi(GetPlural(ƒатѕад)) = "триллионам"
        .Casi(¬инѕад) = "триллион":  .Casi(GetPlural(¬инѕад)) = "триллионы"
        .sx = MaleSex
    End With
End Function

Rem ‘ункци€ возвращает ноль
Private Function Zero(ByVal cas As Casus) As String
    Select Case cas
        Case »мѕад
            Zero = "ноль"
        Case –одѕад
            Zero = "нул€"
        Case ƒатѕад
            Zero = "нулю"
        Case ¬инѕад
            Zero = "ноль"
        Case Else
            Err.Raise WCasErr, Source:="Zero", _
                Description:="ќшибка в нумерации падежей"
    End Select
End Function

Rem ‘ункци€ возвращает единицу
Private Function One(ByVal cas As Casus, ByVal sx As Sex) As String
    Select Case sx
        Case MaleSex
            Select Case cas
                Case »мѕад
                    One = "один"
                Case –одѕад
                    One = "одного"
                Case ƒатѕад
                    One = "одному"
                Case ¬инѕад
                    One = "одного"
                Case Else
                    Err.Raise WCasErr, Source:="One (male)", _
                        Description:="ќшибка в нумерации падежей"
            End Select
        Case FemaleSex
            Select Case cas
                Case »мѕад
                    One = "одна"
                Case –одѕад
                    One = "одной"
                Case ƒатѕад
                    One = "одной"
                Case ¬инѕад
                    One = "одну"
                Case Else
                    Err.Raise WCasErr, Source:="One (female)", _
                        Description:="ќшибка в нумерации падежей"
            End Select
        Case Else
            Err.Raise WSexErr, Source:="One", _
                Description:="ќшибка в выборе окончаний"
    End Select
End Function

Rem ‘ункци€ возвращает двойку
Private Function Two(ByVal cas As Casus, ByVal sx As Sex) As String
    Select Case cas
        Case »мѕад
            Select Case sx
                Case MaleSex
                    Two = "два"
                Case FemaleSex
                    Two = "две"
                Case Else
                    Err.Raise WSexErr, Source:="Two", _
                        Description:="ќшибка в выборе окончаний"
            End Select
        Case –одѕад
            Two = "двух"
        Case ƒатѕад
            Two = "двум"
        Case ¬инѕад
            Two = "двух"
        Case Else
            Err.Raise WCasErr, Source:="Two", _
                Description:="ќшибка в нумерации падежей"
    End Select
End Function

Rem ‘ункци€, возвращающа€ числа до двадцати
Private Function ThreeTwenty(ByVal dig As Byte, ByVal cas As Casus) As String
    Dim numbs(19 - 3, [_TotalCasi]) As String
    numbs(3 - 3, »мѕад) = "три"
    numbs(3 - 3, –одѕад) = "трЄх"
    numbs(3 - 3, ƒатѕад) = "трЄм"
    numbs(3 - 3, ¬инѕад) = "трЄх"
    
    numbs(4 - 3, »мѕад) = "четыре"
    numbs(4 - 3, –одѕад) = "четырЄх"
    numbs(4 - 3, ƒатѕад) = "четырЄм"
    numbs(4 - 3, ¬инѕад) = "четырЄх"
    
    numbs(5 - 3, »мѕад) = "п€ть"
    numbs(5 - 3, –одѕад) = "п€ти"
    numbs(5 - 3, ƒатѕад) = "п€ти"
    numbs(5 - 3, ¬инѕад) = "п€ть"
    
    numbs(6 - 3, »мѕад) = "шесть"
    numbs(6 - 3, –одѕад) = "шести"
    numbs(6 - 3, ƒатѕад) = "шести"
    numbs(6 - 3, ¬инѕад) = "шесть"
    
    numbs(7 - 3, »мѕад) = "семь"
    numbs(7 - 3, –одѕад) = "семи"
    numbs(7 - 3, ƒатѕад) = "семи"
    numbs(7 - 3, ¬инѕад) = "семь"
    
    numbs(8 - 3, »мѕад) = "восемь"
    numbs(8 - 3, –одѕад) = "восьми"
    numbs(8 - 3, ƒатѕад) = "восьми"
    numbs(8 - 3, ¬инѕад) = "восемь"
    
    numbs(9 - 3, »мѕад) = "дев€ть"
    numbs(9 - 3, –одѕад) = "дев€ти"
    numbs(9 - 3, ƒатѕад) = "дев€ти"
    numbs(9 - 3, ¬инѕад) = "дев€ть"
    
    numbs(10 - 3, »мѕад) = "дес€ть"
    numbs(10 - 3, –одѕад) = "дес€ти"
    numbs(10 - 3, ƒатѕад) = "дес€ти"
    numbs(10 - 3, ¬инѕад) = "дес€ть"
    
    numbs(11 - 3, »мѕад) = "одиннадцать"
    numbs(11 - 3, –одѕад) = "одиннадцати"
    numbs(11 - 3, ƒатѕад) = "одиннадцати"
    numbs(11 - 3, ¬инѕад) = "одиннадцать"
    
    numbs(12 - 3, »мѕад) = "двенадцать"
    numbs(12 - 3, –одѕад) = "двенадцати"
    numbs(12 - 3, ƒатѕад) = "двенадцати"
    numbs(12 - 3, ¬инѕад) = "двенадцать"
    
    numbs(13 - 3, »мѕад) = "тринадцать"
    numbs(13 - 3, –одѕад) = "тринадцати"
    numbs(13 - 3, ƒатѕад) = "тринадцати"
    numbs(13 - 3, ¬инѕад) = "тринадцать"
    
    numbs(14 - 3, »мѕад) = "четырнадцать"
    numbs(14 - 3, –одѕад) = "четырнадцати"
    numbs(14 - 3, ƒатѕад) = "четырнадцати"
    numbs(14 - 3, ¬инѕад) = "четырнадцать"
    
    numbs(15 - 3, »мѕад) = "п€тнадцать"
    numbs(15 - 3, –одѕад) = "п€тнадцати"
    numbs(15 - 3, ƒатѕад) = "п€тнадцати"
    numbs(15 - 3, ¬инѕад) = "п€тнадцать"
    
    numbs(16 - 3, »мѕад) = "шестнадцать"
    numbs(16 - 3, –одѕад) = "шестнадцати"
    numbs(16 - 3, ƒатѕад) = "шестнадцати"
    numbs(16 - 3, ¬инѕад) = "шестнадцать"
    
    numbs(17 - 3, »мѕад) = "семнадцать"
    numbs(17 - 3, –одѕад) = "семнадцати"
    numbs(17 - 3, ƒатѕад) = "семнадцати"
    numbs(17 - 3, ¬инѕад) = "семнадцать"
    
    numbs(18 - 3, »мѕад) = "восемнадцать"
    numbs(18 - 3, –одѕад) = "восемнадцати"
    numbs(18 - 3, ƒатѕад) = "восемнадцати"
    numbs(18 - 3, ¬инѕад) = "восемнадцать"
    
    numbs(19 - 3, »мѕад) = "дев€тнадцать"
    numbs(19 - 3, –одѕад) = "дев€тнадцати"
    numbs(19 - 3, ƒатѕад) = "дев€тнадцати"
    numbs(19 - 3, ¬инѕад) = "дев€тнадцать"
    
    ThreeTwenty = numbs(dig - 3, cas)
End Function

Private Function Ten(ByVal dig As Byte, cas As Casus) As String
    Dim numbs(9, [_TotalCasi]) As String
        
    numbs(2, »мѕад) = "двадцать"
    numbs(2, –одѕад) = "двадцати"
    numbs(2, ƒатѕад) = "двадцати"
    numbs(2, ¬инѕад) = "двадцать"
    
    numbs(3, »мѕад) = "тридцать"
    numbs(3, –одѕад) = "тридцати"
    numbs(3, ƒатѕад) = "тридцати"
    numbs(3, ¬инѕад) = "тридцать"
    
    numbs(4, »мѕад) = "сорок"
    numbs(4, –одѕад) = "сорока"
    numbs(4, ƒатѕад) = "сорока"
    numbs(4, ¬инѕад) = "сорок"
    
    numbs(5, »мѕад) = "п€тьдес€т"
    numbs(5, –одѕад) = "п€тидес€ти"
    numbs(5, ƒатѕад) = "п€тидес€ти"
    numbs(5, ¬инѕад) = "п€тьдес€т"
    
    numbs(6, »мѕад) = "шестьдес€т"
    numbs(6, –одѕад) = "шестидес€ти"
    numbs(6, ƒатѕад) = "шестидес€ти"
    numbs(6, ¬инѕад) = "шестьдес€т"
    
    numbs(7, »мѕад) = "семьдес€т"
    numbs(7, –одѕад) = "семидес€ти"
    numbs(7, ƒатѕад) = "семидес€ти"
    numbs(7, ¬инѕад) = "семьдес€т"
    
    numbs(8, »мѕад) = "восемьдес€т"
    numbs(8, –одѕад) = "восьмидес€ти"
    numbs(8, ƒатѕад) = "восьмидес€ти"
    numbs(8, ¬инѕад) = "восемьдес€т"
    
    numbs(9, »мѕад) = "дев€носто"
    numbs(9, –одѕад) = "дев€носта"
    numbs(9, ƒатѕад) = "дев€носта"
    numbs(9, ¬инѕад) = "дев€носто"
    
    Ten = numbs(dig, cas)
End Function

Private Function Hundred(ByVal dig As Byte, cas As Casus) As String
    Dim numbs(9, [_TotalCasi]) As String
        
    numbs(1, »мѕад) = "сто"
    numbs(1, –одѕад) = "ста"
    numbs(1, ƒатѕад) = "ста"
    numbs(1, ¬инѕад) = "сто"
        
    numbs(2, »мѕад) = "двести"
    numbs(2, –одѕад) = "двуста"
    numbs(2, ƒатѕад) = "двуста"
    numbs(2, ¬инѕад) = "двести"
    
    numbs(3, »мѕад) = "триста"
    numbs(3, –одѕад) = "трЄхсот"
    numbs(3, ƒатѕад) = "трЄмста"
    numbs(3, ¬инѕад) = "триста"
    
    numbs(4, »мѕад) = "четыреста"
    numbs(4, –одѕад) = "четырЄхсот"
    numbs(4, ƒатѕад) = "четырЄстам"
    numbs(4, ¬инѕад) = "четыреста"
    
    numbs(5, »мѕад) = "п€тьсот"
    numbs(5, –одѕад) = "п€тиста"
    numbs(5, ƒатѕад) = "п€тиста"
    numbs(5, ¬инѕад) = "п€тьсот"
    
    numbs(6, »мѕад) = "шестьсот"
    numbs(6, –одѕад) = "шестиста"
    numbs(6, ƒатѕад) = "шестиста"
    numbs(6, ¬инѕад) = "шестьсот"
    
    numbs(7, »мѕад) = "семьсот"
    numbs(7, –одѕад) = "семиста"
    numbs(7, ƒатѕад) = "семиста"
    numbs(7, ¬инѕад) = "семьсот"
    
    numbs(8, »мѕад) = "восемьсот"
    numbs(8, –одѕад) = "восьмиста"
    numbs(8, ƒатѕад) = "восьмиста"
    numbs(8, ¬инѕад) = "восемьсот"
    
    numbs(9, »мѕад) = "дев€тьсот"
    numbs(9, –одѕад) = "дев€тиста"
    numbs(9, ƒатѕад) = "дев€тиста"
    numbs(9, ¬инѕад) = "дев€тьсот"
    
    Hundred = numbs(dig, cas)
End Function

Rem ***************************************************************************
Rem ***************************************************************************
Rem **                                                                       **
Rem **                         *   *   *   ***** *   *                       **
Rem **                         ** **  * *    *   **  *                       **
Rem **                         * * * *   *   *   * * *                       **
Rem **                         *   * *****   *   *  **                       **
Rem **                         *   * *   * ***** *   *                       **
Rem **                                                                       **
Rem ***************************************************************************
Rem ***************************************************************************

Rem ‘ункци€ переводит в множественное число
Private Function GetPlural(ByVal cas As Casus) As Casus
    GetPlural = cas + [_TotalCasi]
End Function

Rem ‘ункци€ возвращает пропись числа, меньше 1000
Private Function ThWord(ByVal num As Integer, _
                        ByVal cas As Casus, _
                        ByRef unit As WORD, _
                        ByVal getpar As Boolean) As String
    If num > 1000 Then _
        Err.Raise WNumErr, _
                  Source:="ThWord", _
                  Description:="«начение выше 1000"
    ThWord = Trim(Hundred(num \ 100, cas) & " " & _
        DigWord(num Mod 100, cas, unit.sx))
    If (num Mod 10 >= 2 And num Mod 10 <= 4) And _
          (num Mod 100 < 12 Or num Mod 100 > 14) Then
        Select Case cas
            Case »мѕад
                cas = –одѕад
            Case –одѕад
                cas = GetPlural(–одѕад)
            Case ƒатѕад
                cas = –одѕад
            Case ¬инѕад
            Case Else
                Err.Raise WCasErr, _
                    Source:="ThWord", _
                    Description:="ќшибка в нумерации падежей"
        End Select
    Else
        If cas = ƒатѕад Then
            cas = GetPlural(cas)
        ElseIf num Mod 10 <> 1 Or num Mod 100 = 11 Then
            cas = GetPlural(–одѕад)
        End If
    End If
    If getpar Then _
        ThWord = ThWord & ") " & unit.Casi(cas) _
    Else _
        ThWord = ThWord & " " & unit.Casi(cas)
End Function

Rem ‘ункци€ переводит двузначное значение в пропись
Private Function DigWord(ByVal digs As Byte, _
                         ByVal cas As Casus, _
                         ByVal sx As Sex) As String
    Select Case digs
        Case 0
            DigWord = ""
        Case 1
            DigWord = One(cas, sx)
        Case 2
            DigWord = Two(cas, sx)
        Case Is < 20
            DigWord = ThreeTwenty(digs, cas)
        Case Else
            DigWord = Ten(digs \ 10, cas) & " " & _
                DigWord(digs Mod 10, cas, sx)
    End Select
End Function

Rem ‘ункци€ возвращает первый аргумент в случае истинности второго аргумента
Private Function RetFirst(ByVal var1 As String, cond As Boolean) As String
    If cond Then RetFirst = var1 Else RetFirst = ""
End Function

Rem ‘ункци€ переводит сумму в пропись
Public Function ÷≈Ќјѕ–ќѕ(ByVal ÷≈Ќј As Currency, _
        Optional ѕјƒ≈∆ As Casus = »мѕад) As String
Attribute ÷≈Ќјѕ–ќѕ.VB_Description = "¬ыводит цену в рубл€х прописью"
Attribute ÷≈Ќјѕ–ќѕ.VB_ProcData.VB_Invoke_Func = " \n19"
    If ÷≈Ќј < 0 Then _
        Err.Raise WNumErr, Source:="÷≈Ќјѕ–ќѕ", _
            Description:="¬ведена отрицательна€ цена"
   ÷≈Ќј = Round(÷≈Ќј, 2) ' ќкругл€ем, чтобы убрать лишние копейки
    Dim cen As Integer, rbl As Variant
    cen = 100 * (÷≈Ќј - Int(÷≈Ќј)): rbl = CDec(Int(÷≈Ќј))
    If cen = 0 Then
        ÷≈Ќјѕ–ќѕ = Format(cen, "#,#00") & _
            " (" & Zero(ѕјƒ≈∆) & ") копеек"
    Else
        ÷≈Ќјѕ–ќѕ = Format(cen, "#,#00") & _
            " (" & ThWord(cen, ѕјƒ≈∆, Cents(), True)
    End If
    If rbl = 0 Then
        ÷≈Ќјѕ–ќѕ = Format(rbl, "0") & " (" & Zero(ѕјƒ≈∆) & ") рублей " & _
            ÷≈Ќјѕ–ќѕ
    Else
        Dim arr([_TotalExpo]) As WORD, i As Expo, thr As Integer
        arr(unitExp) = Rubles()
        arr(thouExp) = Thousands()
        arr(millExp) = Millions()
        arr(billExp) = Billions()
        arr(trilExp) = Trillions()
        Dim thr1 As Integer
        For i = unitExp To trilExp
            thr = rbl Mod 1000
            If thr > 0 Or i = unitExp Then _
                ÷≈Ќјѕ–ќѕ = _
                    ThWord(thr, ѕјƒ≈∆, arr(i), i = unitExp) & _
                        RetFirst(" ", i = unitExp Or thr1 <> 0) & _
                        ÷≈Ќјѕ–ќѕ
            rbl = rbl \ 1000
            thr1 = thr1 + thr
            If rbl = 0 Then Exit For
        Next i
        ÷≈Ќјѕ–ќѕ = _
            Format(Int(÷≈Ќј), "#,###") & " (" & Trim(÷≈Ќјѕ–ќѕ)
    End If
End Function

Rem ‘ункци€ провер€ет корректность значени€, подразумева€, что аргумент - цена
Rem ¬ принципе может работать и с другими значени€ми,
Rem но в первую очередь - с ценами.
Rem ѕровер€етс€ отсутствие более двух знаков после зап€той
Private Function IsCorrectPrice(ByVal price As Currency) As Boolean
    Dim fraction As Currency
    fraction = Frac(100 * Frac(price))
    If fraction <> 0 Then _
        IsCorrectPrice = False _
    Else IsCorrectPrice = True
End Function

Rem ‘ункци€ ищет ближайшую корректную цену с Ќƒ— или без (определ€етс€ параметром “»ѕ). _
÷ена будет "ближайшей", то есть первой попавшейс€, так что будьте аккуратны при использовании, _
если желаете получать ближайшие "наибольшие" результаты!
Public Function Ќј…“»ЅЋ»∆( _
        ByVal ÷≈Ќј As Currency, _
        ByVal Ќƒ— As Currency, _
        ByVal  ќЋ»„≈—“¬ќ As Currency, _
        Optional ByVal “»ѕ As ExistVAT = Ѕ≈«Ќƒ—) As Currency
Attribute Ќј…“»ЅЋ»∆.VB_Description = "Ќаходит ближайшую корректную цену дл€ ѕродукции, с учЄтомначальной цены, количества ѕродукции и Ќƒ—\n» выводит результат учЄтом типа (с Ќƒ— или без)"
Attribute Ќј…“»ЅЋ»∆.VB_ProcData.VB_Invoke_Func = " \n19"
    Dim valuePlus As Currency, valueMinus As Currency
    If PriceCorrection(÷≈Ќј, Ќƒ—,  ќЋ»„≈—“¬ќ, “»ѕ) Then
            Ќј…“»ЅЋ»∆ = ÷≈Ќј: Exit Function
    Else
        valuePlus = Round(÷≈Ќј, 2): valueMinus = valuePlus
        Do While valueMinus > 0
            If PriceCorrection(valuePlus, Ќƒ—,  ќЋ»„≈—“¬ќ, “»ѕ) Then
                Ќј…“»ЅЋ»∆ = valuePlus: Exit Function
            ElseIf PriceCorrection(valueMinus, Ќƒ—,  ќЋ»„≈—“¬ќ, “»ѕ) Then
                Ќј…“»ЅЋ»∆ = valueMinus: Exit Function
            Else
                valuePlus = valuePlus + 0.01
                valueMinus = valueMinus - 0.01
            End If
        Loop
    End If
    Err.Raise VnFErr, Source:="Ќј…“»ЅЋ»∆", _
        Description:="«начение не найдено!" & Chr(10) & "ѕожалуйста св€житесь с –азработчиком!"
End Function

Private Function PriceCorrection( _
        ByVal price As Currency, _
        ByVal VAT As Currency, _
        ByVal Amount As Currency, _
        ByVal eVAT As ExistVAT) As Boolean
    If eVAT = Ѕ≈«Ќƒ— Then
        PriceCorrection = _
            IsCorrectPrice(price * (1# + VAT)) _
            And IsCorrectPrice(price * Amount * (1# + VAT)) _
            And IsCorrectPrice(price * Amount * VAT)
    Else
        PriceCorrection = _
            IsCorrectPrice(price / (1# + VAT)) _
            And IsCorrectPrice(price * Amount) _
            And IsCorrectPrice(price * Amount / (1# + VAT))
    End If
    PriceCorrection = PriceCorrection And IsCorrectPrice(price)
End Function

Private Function Frac(ByVal value As Currency)
    Frac = value - Sign(value) * Int(Abs(value))
End Function

Private Function Sign(ByVal value As Currency) As Integer
    Select Case value
        Case Is < 0
            Sign = -1
        Case Is > 0
            Sign = 1
        Case Else
            Sign = 0
    End Select
End Function

Rem ***************************************************************************
Rem ***************************************************************************
Rem **                                                                       **
Rem **                      ***** *****  **** ***** *   *                    **
Rem **                        *   *     *   *   *   *   *                    **
Rem **                        *   ***   *       *   **  *                    **
Rem **                        *   *     *       *   * * *                    **
Rem **                        *   *****  ****   *   **  *                    **
Rem **                                                                       **
Rem ***************************************************************************
Rem ***************************************************************************

Rem “ест дл€ цены прописью
Private Sub Test_÷≈Ќј()
    If ÷≈Ќјѕ–ќѕ(0) <> "0 (ноль) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 0", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(1.01) <> "1 (один) рубль 01 (одна) копейка" Then
        MsgBox "ќшибка при 1.01", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(2.02) <> "2 (два) рубл€ 02 (две) копейки" Then
        MsgBox "ќшибка при 2.02", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(3.03) <> "3 (три) рубл€ 03 (три) копейки" Then
        MsgBox "ќшибка при 3.03", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(4.04) <> "4 (четыре) рубл€ 04 (четыре) копейки" Then
        MsgBox "ќшибка при 4.04", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(5.05) <> "5 (п€ть) рублей 05 (п€ть) копеек" Then
        MsgBox "ќшибка при 5.05", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(6.06) <> "6 (шесть) рублей 06 (шесть) копеек" Then
        MsgBox "ќшибка при 6.06", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(7.07) <> "7 (семь) рублей 07 (семь) копеек" Then
        MsgBox "ќшибка при 7.07", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(8.08) <> "8 (восемь) рублей 08 (восемь) копеек" Then
        MsgBox "ќшибка при 8.08", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(9.09) <> "9 (дев€ть) рублей 09 (дев€ть) копеек" Then
        MsgBox "ќшибка при 9.09", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(10.1) <> "10 (дес€ть) рублей 10 (дес€ть) копеек" Then
        MsgBox "ќшибка при 10.1", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(11.11) <> "11 (одиннадцать) рублей 11 (одиннадцать) копеек" Then
        MsgBox "ќшибка при 11.11", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(12.12) <> "12 (двенадцать) рублей 12 (двенадцать) копеек" Then
        MsgBox "ќшибка при 12.12", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(13.13) <> "13 (тринадцать) рублей 13 (тринадцать) копеек" Then
        MsgBox "ќшибка при 13.13", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(14.14) <> "14 (четырнадцать) рублей 14 (четырнадцать) копеек" Then
        MsgBox "ќшибка при 14.14", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(15.15) <> "15 (п€тнадцать) рублей 15 (п€тнадцать) копеек" Then
        MsgBox "ќшибка при 15.15", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(16.16) <> "16 (шестнадцать) рублей 16 (шестнадцать) копеек" Then
        MsgBox "ќшибка при 11.11", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(17.17) <> "17 (семнадцать) рублей 17 (семнадцать) копеек" Then
        MsgBox "ќшибка при 17.17", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(18.18) <> "18 (восемнадцать) рублей 18 (восемнадцать) копеек" Then
        MsgBox "ќшибка при 18.18", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(19.19) <> "19 (дев€тнадцать) рублей 19 (дев€тнадцать) копеек" Then
        MsgBox "ќшибка при 19.19", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(20.2) <> "20 (двадцать) рублей 20 (двадцать) копеек" Then
        MsgBox "ќшибка при 20.20", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(30.3) <> "30 (тридцать) рублей 30 (тридцать) копеек" Then
        MsgBox "ќшибка при 30.30", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(40.4) <> "40 (сорок) рублей 40 (сорок) копеек" Then
        MsgBox "ќшибка при 40.40", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(50.5) <> "50 (п€тьдес€т) рублей 50 (п€тьдес€т) копеек" Then
        MsgBox "ќшибка при 50.50", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(60.6) <> "60 (шестьдес€т) рублей 60 (шестьдес€т) копеек" Then
        MsgBox "ќшибка при 60.60", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(70.7) <> "70 (семьдес€т) рублей 70 (семьдес€т) копеек" Then
        MsgBox "ќшибка при 70.70", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(80.8) <> "80 (восемьдес€т) рублей 80 (восемьдес€т) копеек" Then
        MsgBox "ќшибка при 80.80", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(90.9) <> "90 (дев€носто) рублей 90 (дев€носто) копеек" Then
        MsgBox "ќшибка при 90.90", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(100) <> "100 (сто) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 100", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(200) <> "200 (двести) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 200", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(300) <> "300 (триста) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 300", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(400) <> "400 (четыреста) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 400", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(500) <> "500 (п€тьсот) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 500", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(600) <> "600 (шестьсот) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 600", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(700) <> "700 (семьсот) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 700", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(800) <> "800 (восемьсот) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 800", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(900) <> "900 (дев€тьсот) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 900", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(1000) <> "1†000 (одна тыс€ча) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 1000", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(1111) <> "1†111 (одна тыс€ча сто одиннадцать) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 1000", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(1000000) <> "1†000†000 (один миллион) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 1000000", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(1123456) <> "1†123†456 (один миллион сто двадцать три тыс€чи четыреста п€тьдес€т шесть) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 1123456", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    ElseIf ÷≈Ќјѕ–ќѕ(1000456) <> "1†000†456 (один миллион четыреста п€тьдес€т шесть) рублей 00 (ноль) копеек" Then
        MsgBox "ќшибка при 1000456", vbCritical, "ќЎ»Ѕ ј!"
        Exit Sub
    End If
End Sub

Private Function Test_Sign() As Boolean
    Randomize (Timer)
    Dim arr() As Currency
    ReDim arr(Int(9 * Rnd + 1))
    Dim i As Byte
    For i = 0 To UBound(arr) - 1
        arr(i) = CCur(Int(20 * Rnd - 10)) ' ќт -10 до +10
        If (arr(i) < 0 And Sign(arr(i)) <> -1) Or _
           (arr(i) > 0 And Sign(arr(i)) <> 1) Or _
           (arr(i) = 0 And Sign(arr(i)) <> 0) Then
            Test_Sign = False
#If DBG > DBGLowLevel Then
            Debug.Print "Test_Sign не пройден! " & "arr(i)=" & arr(i) & _
            " Sign(arr(i))=" & Sign(arr(i))
#End If
        End If
    Next i
    Test_Sign = True
End Function

Private Function Test_Frac() As Boolean
    If (Frac(100.1) <> 0.1) Or _
       (Frac(10.1) <> 0.1) Or _
       (Frac(8.7) <> 0.7) Or _
       (Frac(-100.1) <> -0.1) Or _
       (Frac(-23.4) <> -0.4) Or _
       (Frac(0#) <> 0#) Then
        Test_Frac = False
#If DBG > DBGLowLevel Then
        Debug.Print "Test_Frac не пройден!"
#End If
        Exit Function
    End If
    Test_Frac = True
End Function

Private Function Test_IsCorrectPrice() As Boolean
    Randomize (Timer)
    Dim arr() As Currency
    ReDim arr(Int(9 * Rnd + 1))
    Dim i As Byte
    For i = 0 To UBound(arr) - 1
        arr(i) = CCur((Int(9 * Rnd + 1))) / 1000 ' ќт 0.001 до +0.009
        If IsCorrectPrice(arr(i)) Then
            Test_IsCorrectPrice = False
#If DBG > DBGLowLevel Then
            Debug.Print "Test_IsCorrectPrice не пройден!" & "arr(i)=" & arr(i)
#End If
            Exit Function
        End If
        arr(i) = CCur((Int(9 * Rnd + 1))) / 100 ' ќт 0.01 до +0.09
        If Not IsCorrectPrice(arr(i)) Then
            Test_IsCorrectPrice = False
#If DBG > DBGLowLevel Then
            Debug.Print "Test_IsCorrectPrice не пройден!" & "arr(i)=" & arr(i)
#End If
            Exit Function
        End If
    Next i
    Test_IsCorrectPrice = True
End Function

Private Function Test_Ѕ≈«Ќƒ—Correction() As Boolean
    Randomize (Timer)
    If PriceCorrection(10.003, 10 * Rnd, 20 * Rnd, Ѕ≈«Ќƒ—) Then
        Test_Ѕ≈«Ќƒ—Correction = False: Exit Function
    ElseIf PriceCorrection(20.0018, 10 * Rnd, 20 * Rnd, Ѕ≈«Ќƒ—) Then
        Test_Ѕ≈«Ќƒ—Correction = False: Exit Function
    ElseIf PriceCorrection(157.12, 0.1, 20 * Rnd, Ѕ≈«Ќƒ—) Then
        Test_Ѕ≈«Ќƒ—Correction = False: Exit Function
    ElseIf PriceCorrection(157.15, 0.2, 11.1, Ѕ≈«Ќƒ—) Then
        Test_Ѕ≈«Ќƒ—Correction = False: Exit Function
    ElseIf Not PriceCorrection(157.15, 0.2, 11, Ѕ≈«Ќƒ—) Then
        Test_Ѕ≈«Ќƒ—Correction = False: Exit Function
    End If
    Test_Ѕ≈«Ќƒ—Correction = True
End Function

Private Function Test_—Ќƒ—Correction() As Boolean
    Randomize (Timer)
    If PriceCorrection(10.003, 10 * Rnd, 20 * Rnd, —Ќƒ—) Then
        Test_—Ќƒ—Correction = False: Exit Function
    ElseIf PriceCorrection(20.0018, 10 * Rnd, 20 * Rnd, —Ќƒ—) Then
        Test_—Ќƒ—Correction = False: Exit Function
    ElseIf PriceCorrection(157, 0.1, 20 * Rnd, —Ќƒ—) Then
        Test_—Ќƒ—Correction = False: Exit Function
    ElseIf PriceCorrection(157.3, 0.1, 11.12, —Ќƒ—) Then
        Test_—Ќƒ—Correction = False: Exit Function
    ElseIf PriceCorrection(157.3, 0.1, 11.121, —Ќƒ—) Then
        Test_—Ќƒ—Correction = False: Exit Function
    ElseIf Not PriceCorrection(157.3, 0.1, 11, —Ќƒ—) Then
        Test_—Ќƒ—Correction = False: Exit Function
    End If
    Test_—Ќƒ—Correction = True
End Function

Private Function Test_Ќј…“»ЅЋ»∆() As Boolean
    If Ќј…“»ЅЋ»∆(0#, 0#, 0#, Ѕ≈«Ќƒ—) <> 0# Then
        Test_Ќј…“»ЅЋ»∆ = False: Exit Function
    ElseIf Ќј…“»ЅЋ»∆(0#, 0#, 0#, Ѕ≈«Ќƒ—) <> 0# Then
        Test_Ќј…“»ЅЋ»∆ = False: Exit Function
    ElseIf Ќј…“»ЅЋ»∆(157.8994082, 0.1, 1622.4, Ѕ≈«Ќƒ—) <> 158# Then
        Test_Ќј…“»ЅЋ»∆ = False: Exit Function
    ElseIf Ќј…“»ЅЋ»∆(163.2692307, 0.1, 1622.4, Ѕ≈«Ќƒ—) <> 163.5 Then
        Test_Ќј…“»ЅЋ»∆ = False: Exit Function
    ElseIf Ќј…“»ЅЋ»∆(257.06, 0.17, 555#, Ѕ≈«Ќƒ—) <> 257# Then
        Test_Ќј…“»ЅЋ»∆ = False: Exit Function
    ElseIf Ќј…“»ЅЋ»∆(225.7, 0.2, 542#, —Ќƒ—) <> 225.72 Then
        Test_Ќј…“»ЅЋ»∆ = False: Exit Function
    ElseIf Ќј…“»ЅЋ»∆(245.5, 0.17, 338#, —Ќƒ—) <> 245.7 Then
        Test_Ќј…“»ЅЋ»∆ = False: Exit Function
    End If
    Test_Ќј…“»ЅЋ»∆ = True
End Function


